{"version":3,"sources":["../../src/components/check_box.js"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE/B,IAAM,aAAa,GAAM,OAAO,CAAC,2BAA2B,CAAC,CAAC;;;AAG9D,IAAM,UAAU,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,CAAC;;IAEvD,QAAQ;YAAR,QAAQ;;AACD,WADP,QAAQ,CACA,KAAK,EAAE;0BADf,QAAQ;;AAEV,+BAFE,QAAQ,6CAEJ,KAAK,EAAE;GACd;;eAHG,QAAQ;;WAKM,8BAAE;AAClB,UAAI,CAAC,QAAQ,CAAC;AACZ,UAAE,EAAC,IAAI,CAAC,QAAQ,CACd,IAAI,CAAC,KAAK,CAAC,QAAQ,EACnB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CACnB;AACD,aAAK,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AACxB,aAAK,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK;AAC3B,gBAAQ,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ;OAClC,CAAC,CAAC;KACJ;;;WAES,sBAAE;AACV,UAAI,QAAQ,GAAG,AAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAI,KAAK,GAAG,IAAI,CAAC;AACpD,UAAI,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAC,QAAQ,EAAC,CAAC,CAAC;AACnC,mBAAa,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;KACpF;;;WAEK,kBAAG;AACP,aACE;;UAAO,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,AAAC,EAAC,SAAS,EAAC,iBAAiB;QACxD,+BAAO,IAAI,EAAC,UAAU,EAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,AAAC,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,AAAC,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,AAAC,EAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,AAAC,GAAG;QACxI,IAAI,CAAC,KAAK,CAAC,KAAK;OACX,CACR;KACH;;;SA/BG,QAAQ;GAAS,KAAK,CAAC,SAAS;;AAkCtC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;;AAE9C,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"check_box.js","sourcesContent":["//Libraries\nconst React = require(\"react\");\n\nconst FilterActions    = require(\"../actions/filter_actions\");\n\n//Mixins\nconst textMixins = require(\"morse-react-mixins\").text_mixins;\n\nclass CheckBox extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentWillMount(){\n    this.setState({\n      id:this.createId(\n        this.props.filterBy,\n        this.props.data.title,\n        this.props.data.id\n      ),\n      value:this.props.data.id,\n      title:this.props.data.title,\n      selected:this.props.data.selected\n    });\n  }\n\n  _onChecked(){\n    let selected = (this.state.selected) ? false : true;\n    this.setState({selected:selected});\n    FilterActions.checkFilter(this.props.filterBy, String(this.state.value), selected);\n  }\n\n  render() {\n    return (\n      <label htmlFor={this.state.id} className=\"checkbox-inline\">\n        <input type=\"checkbox\" value={this.state.value} id={this.state.id} checked={this.state.selected} onChange={this._onChecked.bind(this)} />\n        {this.state.title}\n      </label>\n    );\n  }\n}\n\nObject.assign(CheckBox.prototype, textMixins);\n\nmodule.exports = CheckBox;\n"]}